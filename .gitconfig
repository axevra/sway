[user]
  name = axevra
	email = xaylei@outlook.com

[remote "origin"]
	; fetch = +refs/heads/*:refs/remotes/origin/*

[alias]
  ;; add ;;
  a = add
  ap = add -p
  aa = add .


  ;; remove ;;
  rm = rm -r
  rmf = "! git rm --force"


  ;; log/reflog ;;
  l = log --oneline --graph --decorate --parents
  ls = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  one = log -1  ; no input displays HEAD
  fl = log --patch
  filelog = log --patch
  ref = reflog
  lref = log --oneline --graph --decorate --parents --reflog
  expire = "! git fsck --unreachable --dangling --no-reflogs; git reflog expire --expire=now --all; git gc --prune=now"


  ;; commit ;;
  c = "! git commit --verbose; git push"
  cf = "! git commit --verbose; git push --force"
  cm = commit -m
  ca = "! git c --amend"


  ;; branch ;;
  b = "! git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's|refs/heads/||'"
  br = branch -r
  ba = branch -a
  bd = branch -d
  bD = branch -D
  bc = branch -c
  create = "! git bc"


  ;; rebase ;;
  r = rebase
  ri = rebase --interactive
  rc = rebase --continue
  ra = rebase --skip
  rs = rebase --abort
  rq = rebase --quit


  ;; diff ;;
  d = diff
  ds = diff --stat
  dc = diff --cached


  ;; worktree ;;
  wl = worktree list
  wa = "! f(){ git worktree add ../$1 $1; }; f"
  wr = worktree remove
  wrm = "! git wr"
  wmv = worktree move
  wnew = "! f(){ git worktree add ../$1; cd ../$1; git push --set-upstream origin $1; }; f"
  wc = "! f(){ PROJ=$(printf $1 | sed -e 's|.*/||' | sed -e 's|.git||'); mkdir $PROJ; cd $PROJ; if git ls-remote $1 | grep -q "main"; then BRANCH="main"; elif git ls-remote $1 | grep -q "master"; then BRANCH="master"; elif git ls-remote $1 | grep -q "trunk"; then BRANCH="trunk"; fi; git clone $1 $BRANCH; }; f"
  wclone = "! git wc"
  wi = "! f(){ mkdir $1; mkdir $1/main; cd $1/main; git init --initial-branch=main; }; f"
  winit = "! git wi"
  wsc = "! f(){ PROJ=$(printf $1 | sed -e 's|.*/||' | sed -e 's|.git||'); mkdir $PROJ; cd $PROJ; if git ls-remote $1 | grep -q "main"; then BRANCH="main"; elif git ls-remote $1 | grep -q "master"; then BRANCH="master"; elif git ls-remote $1 | grep -q "trunk"; then BRANCH="trunk"; fi; git clone --depth=1 --single-branch $1 $BRANCH; }; f"
  wshallow = "! git wsc"


  ;; tags ;;
  t = tag
  td = tag --delete
  pt = "! f(){ git push $1 tag $2; }; f"
  lt = describe --tags --abbrev=0
  lasttag = describe --tags --abbrev=0


  ;; undo ;;
  ;
  ; HEAD -> Staging Index
  ; restoring staging index to state of HEAD
  ; same as `reset` / `reset --mixed`
  unstage = restore --staged 
  ;
  ; Staging Index -> Worktree
  ; restores unstaged commits
  undo-unstaged = restore
  undo-stage = restore
  re = restore
  ;
  ; HEAD -> Staging Index -> Worktree
  ; restoring staging index and worktree to state of HEAD
  ; same as `git restore --staged` then `git restore`
  undo-work = restore --staged --worktree 
  undo-wt = restore --staged --worktree 
  undo = restore --staged --worktree 
  un = restore --staged --worktree 
  ;
  ; Commit -> Staging Index -> Worktree
  ; Restore from specific commit
  undo-specific = "! f(){ git restore --source=\"$1\" $2; }; f"
  ;
  ; changes where the branch pointer is located
  ; effectively, it creates a branch at specified commit even if it exists
  uncommit = switch -C
  change = switch -C
  ch = switch -C
  ;
  ; makes commit which undoes the changes of the previous commit
  invert = revert


  ;; search ;;
  gr = grep -Ii
  grep = grep -Ii
  grr = "! f() { ROOT=$(git rev-parse --show-toplevel) && cd $ROOT && git grep --full-name -In $1 | xargs -I{} echo $ROOT/{}; }; f"
  greproot = "! git grr"
  find = "! git ls-files | grep -i"


  ;; fetch/pull ;;
  f = fetch
  fe = fetch
  fp = fetch --prune ; removes branches not in upstream
  pl = pull
  pp = pull --prune ; removes branches not in upstream
  pr = pull --rebase ; rebases commits onto upstream


  ;; push ;;
  ps = push
  pf = push --force
  pd = push -d

  ;; misc ;;
  sync = "! git fe upstream; git rebase upstream/main; git push; git fp"
  sh = show
  st = status
  sw = switch   ; new checkout - only switching branch w/o restoring worktree
  co = checkout ; old/bad practice - switches branch and can modify worktree
  cl = clone
  cp = cherry-pick  ; usually abusive; sometimes necessary
  mailmap = "! f(){ printf \"$(git config user.name) <$(git config user.email)> <${1}>\" > mailmap; git filter-repo --force --mailmap mailmap; }; f"

  gud = "! man git"


  aliases = "! f(){ TOP=$(expr $(grep -n "^\\\\[alias" ~/.gitconfig | sed -e 's|:.*||') + 1) && for LINE_NUMBER in $(grep -n "^\\\\[" ~/.gitconfig | sed -e 's|:.*||'); do [ $TOP -lt $LINE_NUMBER ] && BOTTOM=$(expr $LINE_NUMBER - 2 ) && break; done; sed -n "${TOP},${BOTTOM}p" ~/.gitconfig; }; f | sed -e 's|^  ||'"

[color]
  diff = auto
  status = auto
  branch = auto

[branch]
  autosetuprebase = always
[core]
	pager = lvim +Man!
  editor = lvim
